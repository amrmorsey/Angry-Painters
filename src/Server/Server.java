/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Server;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author Amr Hisham Said Morsey, ID:900 133 274
 * this class creates a client.
 */
public class Server extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Server
     */
    static int hit = 0; // number of hits
    static boolean myTurn = true;  // is servers turn.
    static boolean isWin = false; // did he win.
    static ServerSocket ss; // creates a server socket
    static Socket s; // socket for client to connect on
    Thread t = new Thread(this); // thread of this class
    static PrintWriter out; // to send messages to client.
    static BufferedReader in ; // to recieve from client.
     panel p = new panel(); // instance of object panel.
    
    public Server() {
        super("Server");
        try {
            ss = new ServerSocket(8080);
            s = ss.accept();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.setSize(900, 563);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
       
        this.add(p);
        this.addKeyListener(p);
        this.addMouseListener(p);
        this.setVisible(true);
        t.start();
    }
        /**
     * sends the move that has been made to the server
     * @param s string that describes the move.
     */
    public static void sendMove(String s){
        out.println(s);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            ss = new ServerSocket(8080);
            s = ss.accept();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }
    boolean proj = true;
        /**
     * This method takes a string and tries to mimic the move that the
     * server did.
     * @param s string describing the move.
     */
    public void mimicMove(String s){
        if(s.equalsIgnoreCase("left")){
            p.cx = p.cx-10;
            p.pcx = p.pcx-10;
            p.repaint();
        }
        if(s.equalsIgnoreCase("right")){
            p.cx = p.cx+10;
            p.pcx = p.pcx+10;
            p.repaint();
        }
        if(s.equalsIgnoreCase("space")){
             if(proj){
                p.pcx += 10;
                p.pcy -=10;
            }
            else{
                p.pcx +=10;
                p.pcy +=10;
            }
            if(p.pcy<200)
                proj = false;

            repaint();
        }
            if(s.equalsIgnoreCase("hit")){
                JOptionPane.showMessageDialog(this, "HIT");
                myTurn = true;
                p.paintx = p.x +20;
                p.painty = p.y+20;
                proj = true;
                p.pcx = p.cx+20;
                p.pcy = p.cy+20;
        }
            if(s.equalsIgnoreCase("Finished")){
                    myTurn = true;
                    p.paintx = p.x +20;
                    p.painty = p.y+20;
                    proj = true;
                    p.pcx = p.cx+20;
                    p.pcy = p.cy+20;
                }
            if(s.equalsIgnoreCase("win"))
            {
                JOptionPane.showMessageDialog(this,"You lose");
                this.setVisible(false);
                this.dispose();
            }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true){
            try {
                out = new PrintWriter(s.getOutputStream(), true);
                in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                
                String clientMove;
                clientMove = in.readLine();
                System.out.println(clientMove);
                mimicMove(clientMove);
                if(isWin){
                    this.setVisible(false);
                    this.dispose();
                }

            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
/**
 * class panel that extends JPanel is the class that have all the images
 * and applies all the moves.
 * @author Amr Hisham Said
 */
 class panel extends javax.swing.JPanel implements MouseListener, KeyListener{

    /**
     * Creates new form panel
     */
    Toolkit t = Toolkit.getDefaultToolkit(); 
    Image bg = t.getImage("bg.png");//sea
    Image red = t.getImage("red.png");//red house
    int x =800;
    int y = 470;
    int paintx =x+20;
    int painty =y+20;
    int cx = 100;
    int cy = 470;
    int pcx = 100+20;
    int pcy = 470+20;
    Image blue = t.getImage("blue.png");
    Image rp = t.getImage("rb.png");
    Image bp = t.getImage("rp.png");
    Image r = t.getImage("r.png");
    Image b = t.getImage("b.png");
    public panel() {
        super(true);
        this.setSize(900, 563);
        this.setOpaque(false);
        initComponents();
    }
    @Override
        /**
     * draws all the images into the panel.
     * @param g 
     */
    public void paintComponent(Graphics g){
        g.drawImage(bg, 0, 0, this);
        g.drawImage(red, 800, 400, this);
        g.drawImage(blue, 0, 400, this);
        g.drawImage(bp, cx, cy, this);
        g.drawImage(b,pcx,pcy,this);
        g.drawImage(rp, x, y, this);
        g.drawImage(r,paintx,painty,this);
        
    }
    boolean flag = true;
        /**
     * to create a projectile like motion.
     */
    void projectile(){
            if(flag){
                paintx -= 10;
                painty -=10;
            }
            else{
                paintx -=10;
                painty +=10;
            }
            if(painty<200)
                flag = false;

            repaint();   
    }
     /**
     * check if player his the other house
     * @return true if the player hit, false other wise.
     */
    boolean isHit(){
        if(paintx<100&&painty>400)
        {
            Server.hit++;
           return true; 
        }
            
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration                   

    @Override
    public void mouseClicked(MouseEvent e) {
        System.out.println(e.getX()+ " "+ e.getY());
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        repaint();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    boolean onlySpace = false;
    @Override
        /**
     * responsible for the actions that comes from the keys. moving the images.
     * 
     */
    public void keyPressed(KeyEvent e) {
        int keycode = e.getKeyCode();
        //System.out.println(keycode);
        if(Server.myTurn){
        switch(keycode){
            case KeyEvent.VK_LEFT: if(!onlySpace){paintx = paintx-10;x = x -10;Server.sendMove("Left");}break;
            case KeyEvent.VK_RIGHT: if(!onlySpace){paintx = paintx+10;x = x +10 ;Server.sendMove("Right");}break;
            case KeyEvent.VK_SPACE:
                if(isHit()){
                    if(isWin()){
                  JOptionPane.showMessageDialog(this, "YOU WIN");
                  Server.sendMove("win");
            }else{
                                    JOptionPane.showMessageDialog(this, "HIT");
                                    flag=true;onlySpace=false;
                                    Server.myTurn = false;
                                    Server.sendMove("Hit");}
                              }else{
                                    if(painty>500){
                                        Server.myTurn = false;
                                        flag=true;onlySpace=false;
                                        Server.sendMove("Finished");}
                                    else{
                                        projectile();
                                        onlySpace=true;
                                        Server.sendMove("Space");}
            }
            break;
            }
        }
        //System.out.println(x+boat.getWidth(this)/2+" "+y);
        repaint();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
     /**
     * checks if player won.
     * @return true if won, false otherwise.
     */
    boolean isWin(){
        if(Server.hit ==4){
            Server.isWin = true;
            return true;
            
        }
            
        return false;
    }
    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}